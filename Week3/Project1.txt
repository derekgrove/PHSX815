Pseudo code explaining how my program will work, approximately.
*thoughts, I want to make a probablity distribution that is that of a particle collision, maybe e- + e+ -> muons, gamma, etc.

define defualt collision energy;
define default number of experiments;
Define a probability distribution here{
    calculate expected results of collisions based on energy;
    split range from 0 - 1 into 4 slices, each slice's range is dependent on the distribution calculated above;   
}

add in functionality to take arguments from terminal to change collision energy;
add in functionality to take arguments from terminal to change number of experiments;



for number of experiments {
generate a random number between 0 and 1, compare to our above distribution, return the verdict (muon, gamma, etc.)
 (probably have the verdict returned as 0, 1, 2, 3... where 1 = muon, 2 = gamma, etc. reason for this is to make later analysis easier, analyzing ints instead of strings like "muon", "gamma", etc.)
}

End program one _____________________________________________

In another file, our analysis program:

code here to bring in .txt file as our input;
pass the data from .txt file into an array;

generate histogram, make number of bins = number of results possible from my previously defined distribution, use plot parameters to name the bins "muon", "gamma", etc.;
start iterating through the array, filling each bin;
show.plot;

Calculate log likelihood ratio of data I simulated (using hyptohesis 1) over hypothesis 1 

both hypothesis go into log likelihood ratio, only one of the hypothesis is postulated as true at a time though. rinse and repeat for multiple hypothesis. The log likelihood ratio is the thing we will observe to make an observation of our data. 
the log likelihood ratio has all the information possible to make a conclusion about that particular hypothesis. 

as N (number of experiments) becomes bigger, we get a better chance of distinguishing the log likelihood ratios. 

ok, so in the analyze data file, I should iterate through some hypothesis, "gamma will be produced with int_hypothesis probability" , int_hypothesis++, loop back.
store the result, after loop of iterations end, sort the array of these results and go with the one that has the log likelihood ratio closest to 1????? 


can also plot the log likelihood ratio, should definitely do that. We pick a threshold before we run the analysis, if log likelihood ratio is above or equal to that threshold we choose that hypothesis ????






